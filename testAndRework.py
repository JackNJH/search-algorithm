# ------------------------------------------------------------
# 1) Defining the state space 
# ------------------------------------------------------------ 
# Hardcoded adjacent list instead of edge list because: 
#   -> The map is static
#   -> Expansion of nodes require less resources compared to edge list (extra step required)

state_space = {
    (0,0):  [(0,1),(1,0),(1,1)],
    (0,1):  [(0,0),(0,2),(1,1)],
    (0,2):  [(0,1),(0,3),(1,1),(1,2),(1,3)],
    (0,3):  [(0,2),(0,4),(1,3)],
    (0,4):  [(0,3),(0,5),(1,3),(1,4),(1,5)],
    (0,5):  [(0,4),(0,6),(1,5)],
    (0,6):  [(0,5),(0,7),(1,5),(1,6),(1,7)],
    (0,7):  [(0,6),(0,8),(1,7)],
    (0,8):  [(0,7),(0,9),(1,7),(1,8),(1,9)],
    (0,9):  [(0,8),(1,9)],

    (1,0):  [(0,0),(1,1),(2,0),(2,1)],
    (1,1):  [(0,0),(0,1),(0,2),(1,0),(1,2),(2,1)],
    (1,2):  [(0,2),(1,1),(1,3),(2,1),(2,2),(2,3)],
    (1,3):  [(0,2),(0,3),(0,4),(1,2),(1,4),(2,3)],
    (1,4):  [(0,4),(1,3),(1,5),(2.3),(2,4),(2.5)],
    (1,5):  [(0,4),(0,5),(0,6),(1,4),(2,5),(1,6)],
    (1,6):  [(0,6),(1,5),(1,7),(2,5),(2,6),(2,7)],
    (1,7):  [(0,6),(0,7),(0,8),(1,6),(1,8),(2,7)],
    (1,8):  [(0,8),(1,7),(1,9),(2,7),(2,8),(2,9)],
    (1,9):  [(0,8),(0,9),(1,8),(2,9)],

    (2,0):  [(1,0),(2,1),(3,0),(3,1)],
    (2,1):  [(1,0),(1,1),(1,2),(2,0),(2,2),(3,1)],
    (2,2):  [(1,2),(2,1),(2,3),(3,1),(3,2),(3,3)],
    (2,3):  [(1,2),(1,3),(1,4),(2,2),(2,4),(3,3)],
    (2,4):  [(1,4),(2,3),(2,5),(3,3),(3,4),(3,5)],
    (2,5):  [(1,4),(1,5),(1,6),(2,4),(2,6),(3,5)],
    (2,6):  [(1,6),(2,5),(2,7),(3,5),(3,6),(3,7)],
    (2,7):  [(1,6),(1,7),(1,8),(2,6),(2,8),(3,7)],
    (2,8):  [(1,8),(2,7),(2,9),(3,7),(3,8),(3,9)],
    (2,9):  [(1,8),(1,9),(2,8),(3,9)],

    (3,0):  [(2,0),(2,1),(4,0),(4,1)],
    (3,1):  [(2,0),(2,1),(2,2),(3,0),(3,2),(4,1)],
    (3,2):  [(2,2),(3,1),(3,3),(4,1),(4,2),(4,3)],
    (3,3):  [(2,2),(2,3),(2,4),(3,2),(3,4),(4,3)],
    (3,4):  [(2,4),(3,3),(3,5),(4,3),(4,4),(4,5)],
    (3,5):  [(2,4),(2,5),(2,6),(3,4),(3,6),(4,5)],
    (3,6):  [(2,6),(3,5),(3,7),(4,5),(4,6),(4,7)],
    (3,7):  [(2,6),(2,7),(2,8),(3,6),(3,8),(4,7)],
    (3,8):  [(3,7),(2,8),(3,9),(4,9),(4,8),(4,7)],
    (3,9):  [(2,8),(2,9),(3,8),(4,9)],

    (4,0):  [(3,0),(4,1),(5,0),(5,1)],
    (4,1):  [(3,0),(3,1),(3,2),(4,0),(4,2),(5,1)],
    (4,2):  [(3,2),(4,1),(4,3),(5,1),(5,2),(5,3)],
    (4,3):  [(3,2),(3,3),(3,4),(4,2),(4,4),(5,3)],
    (4,4):  [(3,4),(4,3),(4,5),(5,3),(5,4),(5,5)],
    (4,5):  [(3,4),(3,5),(3,6),(4,4),(4,6),(5,5)],
    (4,6):  [(3,6),(4,5),(4,7),(5,5),(5,6),(5,7)],
    (4,7):  [(3,6),(3,7),(3,8),(4,6),(4,8),(5,7)],
    (4,8):  [(3,8),(4,7),(4,9),(5,9),(5,8),(5,7)],
    (4,9):  [(3,8),(3,9),(4,8),(5,9)],

    (5,0):  [(4,0),(5,1)],
    (5,1):  [(4,0),(4,1),(4,2),(5,0),(5,2)],
    (5,2):  [(4,2),(5,1),(5,3)],
    (5,3):  [(4,2),(4,3),(4,4),(5,2),(5,4)],
    (5,4):  [(4,4),(5,3),(5,5)],
    (5,5):  [(4,4),(4,5),(4,6),(5,4),(5,6)],
    (5,6):  [(4,6),(5,5),(5,7)],
    (5,7):  [(4,6),(4,7),(4,8),(5,6),(5,8)],
    (5,8):  [(4,8),(5,7),(5,9)],
    (5,9):  [(4,9),(4,8),(5,8)],
}


# ------------------------------------------------------------
# 2) Defining the cell types
# ------------------------------------------------------------
# We index rows 0..5 (top→bottom) and columns 0..9 (left→right). All traps and rewards are one-time uses. 
# Legend for values:
#   'empty'    = plain hex
#   'obstacle' = blocks movement (these are kept for grid customization flexibility)
#   'start'    = start cell
#   'treasure' = must collect
#   'trap1'    = doubles gravity
#   'trap2'    = halves speed 
#   'trap3'    = pushes you two hex‐steps backward
#   'trap4'    = invalidates path if any treasure remains
#   'reward1'  = halves gravity
#   'reward2'  = doubles speed

cell_type = {
    (0,0): 'start',    (0,1): 'empty',    (0,2): 'empty',    (0,3): 'empty',    (0,4): 'reward1',
    (0,5): 'empty',    (0,6): 'empty',    (0,7): 'empty',    (0,8): 'empty',    (0,9): 'empty',

    (1,0): 'empty',    (1,1): 'trap2',    (1,2): 'empty',    (1,3): 'trap1',    (1,4): 'treasure',
    (1,5): 'empty',    (1,6): 'trap3',    (1,7): 'empty',    (1,8): 'obstacle', (1,9): 'empty',

    (2,0): 'empty',    (2,1): 'empty',    (2,2): 'obstacle', (2,3): 'empty',    (2,4): 'obstacle',
    (2,5): 'empty',    (2,6): 'empty',    (2,7): 'reward2',  (2,8): 'trap1',    (2,9): 'empty',

    (3,0): 'obstacle', (3,1): 'reward1',  (3,2): 'empty',    (3,3): 'obstacle', (3,4): 'empty',
    (3,5): 'trap3',    (3,6): 'obstacle', (3,7): 'treasure', (3,8): 'empty',    (3,9): 'treasure',

    (4,0): 'empty',    (4,1): 'empty',    (4,2): 'trap2',    (4,3): 'treasure', (4,4): 'obstacle',
    (4,5): 'empty',    (4,6): 'obstacle', (4,7): 'obstacle', (4,8): 'empty',    (4,9): 'empty',

    (5,0): 'empty',    (5,1): 'empty',    (5,2): 'empty',    (5,3): 'empty',    (5,4): 'empty',
    (5,5): 'reward2',  (5,6): 'empty',    (5,7): 'empty',    (5,8): 'empty',    (5,9): 'empty',
}

